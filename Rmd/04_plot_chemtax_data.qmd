---
title: "Plot CHEMTAX Data"
author: "Sebastian Di Geronimo"
date: "2023-09-30"
format: html
---

# 1.0 ---- Summary of Document ----

+ chemtax-data
  - data manipulation

: plotting-chemtax-data
  - hist plots for all PFTs for Florida Keys, colored by season

+ chemtax-add_labels
  - add labels to variable and add missing season for years
  
: chemtax-stacked-bar
  - stacked bar chart for PFT fraction for each stations and separated by season
  
: chemtax-stacked-bar-year-season
  - stacked bar chart for PFT fraction for each stations and separated by year and season

: chemtax-stacked-bar-conc-year-season
  - stacked bar chart for PFT concentration for each stations and separated by year and season
  
: pft-ts-loess
  - plot time series for each PFT concentration
  - separate by PFT and add GAM smoother
  - facets: full time series, day of year avg, month avg
  
: diat-ts-plt
  - plot time series for each PFT concentration
  - separate by PFT and add GAM smoother
  - facets: full time series, day of year avg, month avg
  
: diat-ts
  - data manipulation to compine diatom grp, cyano grp and hapt grp
  - avg conc by station, PFT and date time

: plt-stn-16
  - plot cyano and diat across time
  
+ diat-ts1
  - TODO: needs work
  - linear model
    * dino = season * year
  - kruskal wallis on conc and year grouped by PFT

+ manova
  - dunn test on conc and season/year per PFT
  - MANOVA on PFT community and season
  
+ station-seasonally-yearly-avgs

+ lat-lon-table
  - lat lon table for stations

# 2.0 ---- Setup ----

## 2.1 Load Libraries
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
if (!nzchar(system.file(package = "librarian"))) 
    install.packages("librarian")

librarian::shelf(
    librarian, conflicted, ggplot2, tibble, tidyr, readr, purrr, dplyr, stringr,
    forcats, lubridate, glue, fs, magrittr, here,
    
    # additional
    rlang, ggridges, scales, ggtext, ggthemes
)

conflicts_prefer(
    dplyr::filter(), 
    dplyr::select()
    )

source(here("scripts", "misc_functions.R"))

theme_set(theme_calc(base_family  = "serif"))

# set color scheme
tol_muted <- 
  c("#88CCEE", "#44AA99", "#117733", "#332288","#DDCC77", "#999933",
    "#CC6677", "#882255", "#AA4499", "#BBBBBB", "#FFAABB")
```

## 2.2 Load Dataset

```{r load-data, include=FALSE}
dir_plt_save <- here("data", "plots", "plot_chemtax_data")

dir_create(here(dir_plt_save))

# set season names and order
szn <- c("Winter", "Spring", "Summer", "Autumn")

#season_year order vector
# seasonyr_order <- 
# c("Spring 2016", "Summer 2016 (No Data)", "Autumn 2016", 
#   "Winter 2016-2017 (No Data)", "Spring 2017", 
#   "Summer 2017", "Autumn 2017", "Winter 2017-2018", "Spring 2018",
#   "Summer 2018", "Autumn 2018", "Winter 2018-2019", "Spring 2019", 
#   "Summer 2019", "Autumn 2019", "Winter 2019-2020", "Spring 2020 (No Data)",
#   "Summer 2020", "Autumn 2020", "Winter 2020-2021", "Spring 2021")

# load chemtax data in wide format
cmtx_w <-
  here("data", "processed", "chemtax_analysis", "chemtax_w_meta_wide.csv") %>%
  read_csv(show_col_types = FALSE) %>%
  filter(!str_detect(station, "60")) %>%
  mutate(
    season = fct(season, levels = szn),
    station = fct_reorder(station, lon)
  ) %>% 
  select(-c(hplc_gsfc_id, cruise:bottle, cluster_code)) %>%
    
  # add PFT concentrations to get total chlorophyll-a
  rowwise() %>%
  mutate(
    total_chl_a = sum(c_across(chloro:pras)),
    .before = chloro
  ) %>%
  ungroup() %T>% print()

# convert to long format
cmtx_l <-
  cmtx_w %>%
  pivot_longer(
    cols      = chloro:last_col(),
    names_to  = "func_type",
    values_to = "conc"
  ) %T>% print()

# ---- phyto full names
phyto_name <-
  tibble(
    names = c(
      "Chlorophyte", "Cryptophyte", "Cyanobacteria 2",
      "Cyanobacteria 4", "Diatom 1", "Diatom 2",
      "Dinoflagellate", "Haptophyte 6", "Haptophyte 8",
      "Prasinophyte"
    )
  ) %>%
  bind_cols(shrt = unique(cmtx_l$func_type)) %>%
    
  # add rows for combined name
  add_row(
    shrt  = c("cyano", "diat", "hapt"),
    names = c("Cyanobacteria", "Diatom", "Haptophyte")
  )

cmtx_l <- 
  left_join(
    cmtx_l,
    phyto_name,
    by = c("func_type" = "shrt")
  )

```

## 2.3 Add: Labels for Season and Year

Format:
- Spring - Autumun is "{season} {year}" 
- Winter: 
  - Dec = "{season} {year}-{year+1}"
  - Jan and Feb = "{season} {year-1}-{year}"
  
When a season and year factor was not sampled at all, added a no data
```{r chemtax-add_labels}
cmtx_l <-
  cmtx_l %>%
  arrange(date_time_utc) %>%
  mutate(
    season_year = case_when(
      str_detect(season, "Aut|Spr|Sum") ~ glue("{season} {year}"),
      str_detect(month, "Jan|Feb")      ~ glue("{season} {year-1}-{year}"),
      str_detect(month, "Dec")          ~ glue("{season} {year}-{year+1}"),
    ),
    season_year = fct_inorder(season_year),
    season_year = fct_expand(
      season_year, 
      "Summer 2016 (No Data)",
      "Winter 2016-2017 (No Data)", 
      "Spring 2020 (No Data)"
    ),
    season_year = fct_relevel(season_year,
      "Summer 2016 (No Data)",
      after = 1
    ),
    season_year = fct_relevel(season_year,
      "Winter 2016-2017 (No Data)",
      after = 3
    ),
    season_year = fct_relevel(season_year,
      "Spring 2020 (No Data)",
      after = 16
    ),
    .after = season
  ) %>%
  # added rows with the missing seasons so that the facet grid will have
  # seasons by column
  complete(season_year, season) %>%
  mutate(station = fct_na_value_to_level(station, "3")) %T>% print()
```



# 3.0 ---- Plot -----

## 3.1 Density and Histogram Plots: PFT 

Density and histogram plot for each PFT per season

```{r plotting-chemtax-data}
plt_cmtx_den_hist <-
  cmtx_l %>%
  nest(.by = func_type) %>%
  filter(!is.na(func_type)) %>%
  mutate(
    hist = map(
      .x = data,
      .y = func_type,
      ~ .x %>%
        ggplot(aes(conc, fill = season)) +
        geom_histogram(
          position = "stack",
          bins = 40,
          na.rm = TRUE
        ) +
        labs(
          title = .x$names,
          x     = "Log<sub>\u0065</sub>([PFT] + 1)",
          y     = "Frequency",
          fill  = "Season"
        ) +
        scale_x_continuous(trans = log1p_trans()) +
        facet_grid(
          facet  = season ~ .,
          scales = "free_x",
        ) +
        theme(
          axis.title.x = element_markdown(margin = margin(t = 20, b = 5))
        )
    ),
    dens = map2(
      .x = data,
      .y = func_type,
      ~ .x %>%
        ggplot(aes(conc, y = season, fill = season)) +
        geom_density_ridges(
          na.rm = TRUE,
          alpha = 0.25
        ) +
        labs(
          title = .x$names,
          x     = "Log<sub>\u0065</sub>([PFT] + 1)",
          y     = "Frequency",
          fill  = "Season"
        ) +
        scale_x_continuous(trans = log1p_trans()) +
        theme(
          axis.title.x = 
            element_markdown(margin = margin(t = 20, b = 5))
        )
      
    )
  )

plt_cmtx_den_hist$dens
plt_cmtx_den_hist$hist
```

## 3.2 Bar Plot: PFT per **Season** and **Station** as Stacked Percent

```{r chemtax-stacked-bar}
# CHEMTAX stacked bar graph
cmtx_l %>%
  filter(!is.na(conc)) %>%
  ggplot(
    aes(
      x     = station,
      y     = conc,
      fill  = names,
      color = names
    )
  ) +
  geom_bar(
    position = "fill",
    stat = "identity",
    na.rm = TRUE
  ) +
  labs(
    x     = "Station",
    y     = "Percent (%)",
    fill  = "Phytoplankton Functional Type",
    color = "Phytoplankton Functional Type"
  ) +
  scale_y_continuous(
    labels = label_percent(),
    expand = c(0, 0)
  ) +
  facet_wrap(~season)

# ---- save plot
# save arguments
sv_arg <-
  list(
    sv_loc    = dir_plt_save,
    sv_nm     = "oft_bar_percent_season", # edit name
    overwrite = FALSE
  ) %>%
  c(
    .,
    exists = dir_ls(.$sv_loc, regexp = .$sv_nm) %>% is_empty()
  )

# save
if (sv_arg$exists | sv_arg$overwrite) {
  save_gg(
    plt            = last_plot(), # edit if want specific plot
    save_location  = sv_arg$sv_loc,
    save_name      = sv_arg$sv_nm[1],
    verbose        = TRUE,
    time_stamp_fmt = "%Y%m%d_%H%M%S",
    device         = "jpeg",
    height         = 9.7,
    width          = 19,
    dpi            = 600,
    units          = "in",
    bg             = "white"
  )
} else {
  cli::cli_alert_info(
    c(
      "Skipping saving of {.file {sv_arg$sv_nm}} ",
      "because exists ",
      "and/or overwrite is set {.var FALSE}"
    )
  )
}

rm(sv_arg)


```


## 3.3 Plot: Bar Plot: PFT per **Season** and **Year** as Stacked Percent

```{r chemtax-stacked-bar-year-season}
# CHEMTAX stacked bar graph with ratio to chlor-a, organized by station
cmtx_l %>%
  # mutate(station = fct_reorder(station, lon, .na_rm = FALSE)) %>%
  # filter(!is.na(station))
  ggplot(
    aes(
      y     = conc,
      x     = station,
      fill  = names,
      color = names
    )
  ) +
  geom_bar(
    position = "fill",
    stat     = "identity",
    na.rm    = TRUE
  ) +
  labs(
    x     = "Station",
    y     = "Relative Ratio",
    fill  = "Phytoplankton Functional Type",
    color = "Phytoplankton Functional Type"
  ) +
  scale_fill_manual(values = tol_muted) +
  scale_color_manual(values = tol_muted) +
  scale_y_continuous(
    labels = label_percent(),
    expand = c(0, 0)
  ) +
  facet_wrap(~season_year, ncol = 4) +

  # theme
  theme(
    axis.title       = element_text(size = 18),
    legend.position  = c(0.6, 0.05),
    legend.direction = "horizontal"
  )

# ---- save plot
# save arguments
sv_arg <-
  list(
    sv_loc    = dir_plt_save,
    sv_nm     = "pft_bar_percent_season_year",
    overwrite = FALSE
  ) %>%
  c(
    .,
    exists = dir_ls(.$sv_loc, regexp = .$sv_nm) %>% is_empty()
  )

# save
if (sv_arg$exists | sv_arg$overwrite) {
  save_gg(
    plt            = last_plot(),
    save_location  = sv_arg$sv_loc,
    save_name      = sv_arg$sv_nm[1],
    verbose        = TRUE,
    time_stamp_fmt = "%Y%m%d_%H%M%S",
    device         = "jpeg",
    height         = 9.7,
    width          = 19,
    dpi            = 600,
    units          = "in",
    bg             = "white"
  )
} else {
  cli::cli_alert_info(
    c(
      "Skipping saving of {.file {sv_arg$sv_nm}} ",
      "because exists ",
      "and/or overwrite is set {.var FALSE}"
    )
  )
}

rm(sv_arg)

```


## 3.4 Plot: Bar Plot: PFT per **Season** and **Year** as Absolute VAr

```{r chemtax-stacked-bar-conc-year-season}
# chemtax stacked bar graph (not ratio), organized by station
cmtx_l %>%
  summarize(
    conc = mean(conc, na.rm = TRUE),
    .by  = c(season_year, station, func_type)
  ) %>%
  ggplot(aes(
    fill  = func_type,
    color = func_type,
    y     = conc,
    x     = station
  )) +
  geom_bar(stat = "identity") +
  labs(
    x     = "Station",
    y     = "Concentration of Chlorophyll-a (mg m<sup>-3</sup>)",
    fill  = "Phytoplankton Functional Type",
    color = "Phytoplankton Functional Type"
  ) +
  scale_fill_manual(values  = tol_muted) +
  scale_color_manual(values = tol_muted) +
  scale_y_continuous(expand = c(0, 0)) +
  facet_wrap(~season_year, ncol = 4) +

  # theme
  theme(
    axis.title.y     = element_markdown(),
    legend.position  = c(0.6, 0.05),
    legend.direction = "horizontal"
  )


# ---- save plot
# save arguments
sv_arg <-
  list(
    sv_loc    = dir_plt_save,
    sv_nm     = "pft_bar_absolute_season_year", # edit name
    overwrite = FALSE
  ) %>%
  c(
    .,
    exists = dir_ls(.$sv_loc, regexp = .$sv_nm) %>% is_empty()
  )

# save
if (sv_arg$exists | sv_arg$overwrite) {
  save_gg(
    plt            = last_plot(), # edit if want specific plot
    save_location  = sv_arg$sv_loc,
    save_name      = sv_arg$sv_nm[1],
    verbose        = TRUE,
    time_stamp_fmt = "%Y%m%d_%H%M%S",
    device         = "jpeg",
    height         = 9.7,
    width          = 19,
    dpi            = 600,
    units          = "in",
    bg             = "white"
  )
} else {
  cli::cli_alert_info(
    c(
      "Skipping saving of {.file {sv_arg$sv_nm}} ",
      "because exists ",
      "and/or overwrite is set {.var FALSE}"
    )
  )
}

rm(sv_arg)

```
# 4.0 Timeseries Plots

## 4.1 *WIP* Line Plot: Timesseries PFT with LOESS Smoother

This was an attempt to see if a smoother could show seasonal trends for each
PFT.

The 3 plots:
- for all y = concentration, facet = PFT
  1. entire series, x = datetime
  2. day of year, x = doy
  3. month, x = month

```{r pft-ts-loess, fig.width=30, fig.height=15}
# base plot list
plt_fun <-
  list(
    aes(
      y     = conc_ratio,
      color = names
    ),
    geom_point(
      show.legend = FALSE, ,
      na.rm       = TRUE
    ),
    # geom_smooth(
    #   formula     = y ~ s(x),
    #   method      = "gam",
    #   se          = FALSE,
    #   show.legend = FALSE
    # ),
    geom_smooth(
      formula     = y ~ x,
      method      = "loess",
      span        = 0.3,
      se          = FALSE,
      show.legend = FALSE,
      na.rm       = TRUE
    ),
    labs(
      x = NULL,
      y = "Pigment:Chlorophyll-a",
      color = NULL
    ),
    scale_y_continuous(expand = c(0, 0)),
    scale_color_brewer(palette = "Paired"),
    facet_grid(names ~ .,
      # scales = "free_y"
      scales = "fixed"
    )
  )


# point plot with smoothing line for 1 functional group, colored by season
plt_smooth <-
  cmtx_l %>%
  mutate(conc_ratio = conc / total_chl_a) %>%
  filter(!is.na(conc_ratio)) %>%
  ggplot() +
  plt_fun


# combine the three versions
(plt_smooth +
  aes(x = date_time_utc) +
        labs(x = "Date")
    ) +
  (plt_smooth +
    aes(x = yday(date_time_utc)) +
    labs(y = NULL,
         x = "Day of Year")
   ) +
  (plt_smooth +
    aes(x = month(date_time_utc)) +
    labs(y = NULL,
         x = "Month")
   ) 
```

## 4.2 *WIP* IDK
```{r diat-ts-plt, fig.width=30, fig.height=15}

# (test2 +  # in PI chunk
#  geom_boxplot(aes( x = season, fill = season))) + 
 # (plt_smooth +
 #  aes(x = date_time_utc)) +
 #  (plt_smooth +
 #    aes(x = yday(date_time_utc)) +
 #    labs(y = NULL)) +
 #  (plt_smooth +
 #    aes(x = month(date_time_utc)) +
 #    labs(y = NULL)) +
 #    patchwork::plot_layout(ncol = 4)
```

# 5.0 *WIP* MANOVA


```{r manova}
# cmtx_dunn2 <- 
    cmtx_l %>%
    group_by(func_type) %>%
    dunn_test(
        conc ~ season_year, 
        p.adjust.method = "bonferroni",
        detailed = TRUE
        ) %>%
    mutate(
        p     = num(p, digits = 3),
        p.adj = num(p.adj, digits = 3),
    ) %>%
    nest(.by = func_type) %$%
    walk2(
        .x = func_type,
        .y = data,
        (\(x, y) mutate(y, func_type = x,
                        .before = 1) %>%
             filter(p < 0.1) %>%
             # arrange(p) %>%
           print())
    )


# MANOVA test
cmtx_man <- 
  cmtx_w %>%
  select(chloro:last_col()) %>%
  as.matrix() 

manova(cmtx_man ~ season, data = cmtx_w) %>%
    summary()

cmtx_w %>%
  mutate(season_year = str_c(season, year(date_time_utc), sep = " "),
         .before = 2) %>%
  manova(cmtx_man ~ season_year, data = .) %>%
  summary()
```






```{r station-seasonally-yearly-avgs}
cmtx_w_new <-
  cmtx_w %>%
  mutate(
    diat  = diat1 + diat2,
    cyano = cyano2 + cyano4,
    hapt  = hapt6 + hapt8,
    total = chloro + crypto + diat + dino + hapt + pras + cyano
  )

cmtx_stat <-
  cmtx_w_new %>%
  summarise(
    across(
      chloro:hapt,
      list(
        avg = (\(x) mean(x, na.rm = TRUE)),
        sd  = (\(x) sd(x,   na.rm = TRUE)),
        var = (\(x) var(x,  na.rm = TRUE))
      )
    ),
    .by = c(year, season, station)
  )

cmtx_fract <-
  cmtx_w_new %>%
  mutate(
    season,
    station,
    across(chloro:hapt, ~ .x / total, .names = "frac_{.col}")
  ) %>%
  select(date_time_utc:season, frac_chloro:frac_pras) %>%
  pivot_longer(
    frac_chloro:frac_pras,
    names_to     = "func_type",
    values_to    = "frac",
    names_prefix = "frac_"
  )

max_fract <-
  cmtx_fract %>%
  summarise(
    max_frac = max(frac),
    .by = sample
  ) %>%
  left_join(cmtx_fract,
    by = c("max_frac" = "frac")
  )
```




